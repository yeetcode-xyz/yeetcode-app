name: Deploy FastAPI (auto, diff-aware)

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/fastapi/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: env

    steps:
      # 1Ô∏è‚É£ Get code
      - name: Checkout code (with history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # 2Ô∏è‚É£ Figure out which FastAPI files changed
      - name: Detect changed FastAPI files
        id: diff
        run: |
          git diff --name-only HEAD~1 HEAD -- scripts/fastapi/ > changed.txt
          CHANGED=$(grep -v '^$' changed.txt | tr '\n' ',' | sed 's/,$//')
          echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT
          echo "‚Üí Changed files: $CHANGED"

      # 3Ô∏è‚É£ Skip if nothing in scripts/fastapi/ changed
      - name: "Skip: no FastAPI changes"
        if: steps.diff.outputs.changed_files == ''
        run: echo "‚úÖ No FastAPI files changed‚Äîskipping deploy."

      # 4Ô∏è‚É£ Prepare a tarball of only those files, flattened into root
      - name: Archive only changed files
        if: steps.diff.outputs.changed_files != ''
        run: |
          mkdir -p changed-files
          while read file; do
            # strip the scripts/fastapi/ prefix
            rel="${file#scripts/fastapi/}"
            mkdir -p "changed-files/$(dirname "$rel")"
            cp "$file" "changed-files/$rel"
          done < changed.txt
          tar -czf changed-files.tgz -C changed-files .

      # 5Ô∏è‚É£ SSH key setup
      - name: Setup SSH
        if: steps.diff.outputs.changed_files != ''
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # 6Ô∏è‚É£ Upload & deploy on VPS
      - name: Upload & deploy to VPS
        if: steps.diff.outputs.changed_files != ''
        run: |
          scp changed-files.tgz changed.txt ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/root/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash -s << 'EOF'
            set -e
            cd /root/yeetcode-api

            # Unpack only the changed files into the app root
            tar -xzf /root/changed-files.tgz -C . 
            rm /root/changed-files.tgz

            # Load your .env
            set -a
            [ -f .env ] && . .env
            set +a

            # If requirements.txt changed, reinstall deps
            if grep -q '^requirements.txt$' /root/changed.txt; then
              echo "üì¶ requirements.txt changed; installing deps..."
              source .venv/bin/activate
              pip install -r requirements.txt
            else
              echo "üì¶ requirements.txt unchanged."
            fi

            # Restart the app
            pkill -f 'python3 main.py' || true
            source .venv/bin/activate
            nohup python3 main.py > fastapi.log 2>&1 &
          EOF

      # 7Ô∏è‚É£ Notify success
      - name: Discord: success
        if: success()
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          CHANGES: ${{ steps.diff.outputs.changed_files }}
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "üîï DISCORD_WEBHOOK secret not set, skipping notification."
            exit 0
          fi
          
          echo "üì° Sending Discord notification..."
          if [ -z "$CHANGES" ]; then
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
              -d '{"content":"üîï No FastAPI files changed‚Äîdeploy skipped."}' \
              "$WEBHOOK")
          else
            # Escape the changes variable for JSON and format as code block
            ESCAPED_CHANGES=$(printf '%s' "$CHANGES" | sed 's/\\/\\\\/g; s/"/\\"/g')
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
              -d "{\"content\":\"‚úÖ FastAPI deployed with changed files:\\n\\\`\\\`\\\`${ESCAPED_CHANGES}\\\`\\\`\\\`\"}" \
              "$WEBHOOK")
          fi
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ "$HTTP_STATUS" = "204" ]; then
            echo "‚úÖ Discord notification sent successfully"
          else
            echo "‚ùå Discord notification failed with status: $HTTP_STATUS"
            echo "Response: $(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//')"
          fi

      # 8Ô∏è‚É£ Notify failure
      - name: Discord: failure
        if: failure()
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "üîï DISCORD_WEBHOOK secret not set, skipping failure notification."
            exit 0
          fi
          
          echo "üì° Sending Discord failure notification..."
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST -H "Content-Type: application/json" \
            -d '{"content":"‚ùå YeetCode FastAPI deploy failed."}' \
            "$WEBHOOK")
          
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ "$HTTP_STATUS" = "204" ]; then
            echo "‚úÖ Discord failure notification sent successfully"
          else
            echo "‚ùå Discord failure notification failed with status: $HTTP_STATUS"
            echo "Response: $(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//')"
          fi
